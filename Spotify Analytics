#I downloaded spotify data from Kaggle, created a table to insert the spotify data into it, and performed an analyses of the data using SQLiteStudio

#Creating the Table
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL)
;

#I then inserted the spotifydata.csv into the table and explored the data with the following SQL...

#Finding the average tempo of the 5 most popular songs
SELECT AVG(tempo)
FROM (SELECT tempo
FROM Spotifydata
ORDER BY popularity DESC
LIMIT 5) x
;

#Finding the average tempo of the 5 least popular songs
SELECT AVG(tempo)
FROM (SELECT tempo
FROM Spotifydata
ORDER BY popularity ASC
LIMIT 5) x
;

#Finding the 10 artists with the loudest songs
SELECT
artist_name 
FROM Spotifydata
ORDER BY loudness DESC
LIMIT 10
;

#Finding the average popularity of those songs
SELECT
AVG(popularity)
FROM (SELECT popularity 
FROM Spotifydata
ORDER BY loudness DESC
LIMIT 10)
;

#Labelling each track as 'very popular', 'popular', or 'less popular', then displaying only the 'very popular' tracks
SELECT
track_name,
CASE
    WHEN popularity >= 90 THEN 'Very Popular'
    WHEN popularity >= 80 THEN 'Popular'
    ELSE 'Less Popular'
END AS Popularity_Description
FROM Spotifydata
WHERE Popularity_Description = 'Very Popular'
;

#Finding the average duration of all of the tracks, converting from milliseconds to minutes
SELECT
AVG(duration_ms / 1000) / 60 AS Duration_Mins
FROM Spotifydata
;




