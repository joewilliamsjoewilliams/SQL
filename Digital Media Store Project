In this project, I answered questions by analyzing a dataset containing information data from a digital media storefront.


1. Show Customers (full names, customer ID, and country) who are not in the US.

SELECT FirstName, LastName, CustomerID, Country
FROM customers
WHERE Country != 'USA';


2. Show only the Customers from Brazil.

SELECT FirstName, LastName, CustomerID, Country
FROM customers
WHERE Country = 'Brazil';


3. Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.

SELECT FirstName, LastName, InvoiceID, InvoiceDate, BillingCountry
FROM chinook.customers cust
JOIN chinook.invoices inv
ON cust.CustomerID = inv.CustomerID
WHERE Country = 'Brazil';


4. Show the Employees who are Sales Agents.

SELECT FirstName, LastName, Title
FROM employees
WHERE Title = 'Sales Support Agent';


5. Find a unique/distinct list of billing countries from the Invoice table.

SELECT distinct billingcountry
FROM invoices
ORDER BY billingcountry;


6. Provide a query that shows the invoices associated with each sales agent.

SELECT employees.FirstName, employees.LastName, invoices.invoiceid, invoicedate, total
FROM invoices
JOIN customers ON invoices.customerid = customers.customerid
JOIN employees ON customers.supportrepid = employees.employeeid;


7. Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.

SELECT employees.FirstName, employees.LastName, customers.FirstName, customers.LastName, customers.Country, invoices.total
FROM invoices
JOIN customers
ON invoices.CustomerId = customers.CustomerId
JOIN employees
ON customers.SupportRepId = employees.EmployeeId;


8. How many Invoices were there in 2009?

SELECT count(*)
FROM invoices
WHERE InvoiceDate LIKE "2009-%";


9. What are the total sales for 2009?

SELECT SUM(total)
FROM invoices
WHERE InvoiceDate LIKE "2009-%";


10. Write a query that includes the purchased track name with each invoice line ID.

SELECT tracks.name, invoice_items.invoicelineid
FROM tracks
JOIN invoice_items				
ON tracks.trackid = invoice_items.trackid;


11. Write a query that includes the purchased track name and artist name with each invoice line ID.

SELECT tracks.name, artists.name, invoice_items.InvoiceLineId
FROM invoice_items
LEFT JOIN tracks
ON invoice_items.TrackId = tracks.TrackId
INNER JOIN albums
ON tracks.AlbumId = Albums.AlbumId			
LEFT JOIN artists
ON albums.ArtistId = artists.ArtistId;


12. Provide a query that shows all the tracks, and include the album name, media type, and genre.

SELECT tracks.Name AS 'Track Name', albums.Title AS 'Album Title', media_types.Name AS 'Media Type', genres.name AS 'Genre'
FROM tracks
JOIN albums
ON tracks.albumid = albums.albumid
JOIN media_types
ON tracks.MediaTypeId = media_types.MediaTypeId
JOIN genres
ON tracks.GenreId = genres.GenreId;


14. Which sales agent made the most dollars in sales in 2009? 

SELECT employees.FirstName, employees.LastName, ROUND(SUM(total), 2) AS 'Total Sales'
FROM invoices
JOIN customers
ON invoices.CustomerID = customers.CustomerId
JOIN employees
ON customers.SupportRepId = employees.EmployeeId
WHERE invoicedate LIKE '2009-%'
AND employees.Title = 'Sales Support Agent' 
GROUP BY employees.FirstName, employees.LastName
ORDER  BY sum(totaL) desc
LIMIT 1;


15. Show the longest tenured employee.

SELECT FirstName, LastName, hiredate
FROM employees
ORDER BY hiredate ASC
LIMIT 1;


16. Write a query that shows all invoices with the customers' fullnames, invoice date, track purchased, and price.

SELECT invoices.invoiceid, invoicedate, customers.FirstName, customers.LastName, tracks.name AS 'track purchased'
FROM invoices
JOIN invoice_items
ON invoices.invoiceid = invoice_items.invoiceid
JOIN customers
ON invoices.customerid = customers.customerid
JOIN tracks
ON invoice_items.trackid = tracks.trackid
ORDER BY invoicedate ASC;


17a. Show the total revenue for each month in the data set.

SELECT strftime("%m-%Y", invoicedate) as 'Month-Year', ROUND(SUM(total), 2) as 'Monthly Revenue'
FROM invoices
GROUP BY strftime("%m-%Y", invoicedate)
ORDER BY strftime("%Y", invoicedate);


17b. Do the same for each year.

SELECT strftime("%Y", invoicedate) as 'Year', ROUND(SUM(total), 2) as 'Revenue'
FROM invoices
GROUP BY strftime("%Y", invoicedate)
ORDER BY strftime("%Y", invoicedate)
;


18. How many songs does each artist have in this database?

SELECT count(distinct tracks.name) as songs, artists.name as artist
FROM artists
LEFT JOIN albums
ON albums.artistid = artists.artistid
INNER JOIN tracks
ON tracks.albumid = albums.albumid
GROUP BY artists.name
ORDER BY count(tracks.name) DESC
;



